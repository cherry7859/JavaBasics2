Abstraction:
    - Hiding the implementation details and only showing the functionality
    - Giving a set of guidelines to the user, who is going to implement those guidelines basd on their needs
    - Abstract Variables and Methods that can be used to create other classes
    - Abstraction can occur via Abstract classes or Interfaces
    - 3rd pillar of OOps
    Ex: At ATM, we don't care what happens inside the machine, just that we get the money
Why Abstraction:
    - Reduces the complexity by separating the idea from implementation
    - Helps user enforce rules and convey our requirements
How to use Abstraction:
    1) Create classes with abstract keyword
    2) Use the abstract keyword with method header and don't provide the body of method
    3) Create the child classes and extend from the parent class and implement the abstract methods
    4) If we don't want to provide the implementation of one or more methods,
        we can declare the child class as abstract as well
Advantages:
    - Lets user focus on what object does, rather than how it does it
    - Helps reduce the complexity and improves the maintainability of the system
Rules:
    1) Abstract methods can't have a body
    2) Abstract class can have defined and undefined/abstract methods
    3) To utilize abstract class, must inherit the class and methods.. then can provide implementation of method
    4) An object of abstract class cannot be created directly, but can be indirectly in derived class
        Ex: Vehicle obj = new Bike(); // indirect object creation
    5) Use abstract classes when we know the methods, but don't know how they would be implemented
    6) Abstract classes can't be declared as final
    7) We can have everything inside an abstract class that we can have in a normal class
        only thing that differs is we can't create the object of that class
Important Notes:
    1) Use abstract parent class if you will have many common methods
